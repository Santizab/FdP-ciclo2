
package view;

import clases.RptCasosPorDepartamento;
import clases.RptCasosPorEdad;
import clases.RptCasosPorGenero;
import clases.RptCasosPorMunicipio;
import controladores.GeneralCtrl;
import java.awt.BorderLayout;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFSheetConditionalFormatting;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.CellStyle;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author sz_21
 */
public class View extends javax.swing.JFrame {

    GeneralCtrl generalCtrl;
    
    public View() {
        initComponents();
        this.generalCtrl = new GeneralCtrl();
        RefreshReportePorEdad();
        RefreshReportePorMunicipio();
        RefreshReportePorDepartamento();
        RefreshReportePorGenero();
        
        
    }

    private void RefreshReportePorEdad(){
        LinkedList<RptCasosPorEdad> reporte= generalCtrl.listCasosPorEdad();
        DefaultPieDataset dataset= new DefaultPieDataset();
        for (RptCasosPorEdad ed : reporte) {
            dataset.setValue(ed.getEdad(), ed.getNumCasosPorEdad());
        }
        JFreeChart chart = ChartFactory.createPieChart("Casos Por Edad",dataset,true,false,false );
        ChartPanel panel1 = new ChartPanel(chart);
        panel1.setMouseWheelEnabled(true);
        panePorEdad.setLayout(new java.awt.BorderLayout());
        panePorEdad.add(panel1, BorderLayout.CENTER);
        panePorEdad.validate();
        
        
    }
    
    private void RefreshReportePorMunicipio(){
        LinkedList<RptCasosPorMunicipio> reporte= generalCtrl.listCasosPorMunicipio();
        DefaultPieDataset dataset= new DefaultPieDataset();
        for (RptCasosPorMunicipio mun : reporte) {
            dataset.setValue(mun.getNombreMun(), mun.getNumCasosPorMunicipio());
        }
        JFreeChart chart = ChartFactory.createPieChart("Casos Por Municipio",dataset,false,false,false );
        ChartPanel panel1 = new ChartPanel(chart);
        panel1.setMouseWheelEnabled(true);
        panePorMunicipio.setLayout(new java.awt.BorderLayout());
        panePorMunicipio.add(panel1, BorderLayout.CENTER);
        panePorMunicipio.validate();
        
        
    }
    
    private void RefreshReportePorDepartamento(){
        LinkedList<RptCasosPorDepartamento> reporte= generalCtrl.listCasosPorDepartamento();
        DefaultPieDataset dataset= new DefaultPieDataset();
        for (RptCasosPorDepartamento dep : reporte) {
            dataset.setValue(dep.getNombreDep(), dep.getNumCasosPorDepartamento());
        }
        JFreeChart chart = ChartFactory.createPieChart("Casos Por Departamento",dataset,true,false,false );
        ChartPanel panel1 = new ChartPanel(chart);
        panel1.setMouseWheelEnabled(true);
        panePorDepartamento.setLayout(new java.awt.BorderLayout());
        panePorDepartamento.add(panel1, BorderLayout.CENTER);
        panePorDepartamento.validate();
        
        
    }
    
    private void RefreshReportePorGenero(){
        LinkedList<RptCasosPorGenero> reporte= generalCtrl.listCasosPorGenero();
        DefaultPieDataset dataset= new DefaultPieDataset();
        for (RptCasosPorGenero gen : reporte) {
            dataset.setValue(gen.getGenero(), gen.getNumCasosPorGenero());
        }
        JFreeChart chart = ChartFactory.createPieChart("Casos Por Edad",dataset,true,false,false );
        ChartPanel panel1 = new ChartPanel(chart);
        panel1.setMouseWheelEnabled(true);
        panePorGenero.setLayout(new java.awt.BorderLayout());
        panePorGenero.add(panel1, BorderLayout.CENTER);
        panePorGenero.validate();
        
        
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        exportar = new javax.swing.JButton();
        Tabs = new javax.swing.JTabbedPane();
        panePorEdad = new javax.swing.JTabbedPane();
        panePorMunicipio = new javax.swing.JTabbedPane();
        panePorDepartamento = new javax.swing.JTabbedPane();
        panePorGenero = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Reportes!");

        exportar.setText("Exportar");
        exportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportarActionPerformed(evt);
            }
        });

        Tabs.addTab("Reporte por Edad", panePorEdad);
        Tabs.addTab("Reporte por Municipio", panePorMunicipio);
        Tabs.addTab("Reporte por Departamento", panePorDepartamento);
        Tabs.addTab("Reporte por Genero", panePorGenero);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Tabs)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(263, 263, 263)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                .addGap(140, 140, 140)
                .addComponent(exportar)
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(exportar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Tabs, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportarActionPerformed
        
        int index = Tabs.getSelectedIndex();
        switch(index){
            case 0:
                LinkedList<RptCasosPorEdad> reporte= generalCtrl.listCasosPorEdad();
                HSSFWorkbook book = new HSSFWorkbook();
                HSSFSheet sheet = book.createSheet();
                book.setSheetName(0, "Reporte Por Edad");
        
                String[] encabezados = new String[]{
                    "Edad",
                    "Total De Casos"
                };
                CellStyle celdaEncabezado =book.createCellStyle();
                HSSFFont font = book.createFont();
                font.setBold(true);
                celdaEncabezado.setFont(font);
                
                HSSFRow filaEncabezado = sheet.createRow(0);
                for (int i = 0; i < encabezados.length ; i++) {
                    String encabezado = encabezados[i];
                    HSSFCell celda = filaEncabezado.createCell(i);
                    celda.setCellStyle(celdaEncabezado);
                    celda.setCellValue(encabezado);
                }
                
                for (int i = 0; i < reporte.size(); i++) {
                    HSSFRow fila = sheet.createRow(i+1);
                    String edad = reporte.get(i).getEdad();
                    int total = reporte.get(i).getNumCasosPorEdad();
                    fila.createCell(0).setCellValue(edad);
                    fila.createCell(1).setCellValue(total);
                    
                }
                
            {
                try {
                    FileOutputStream file = new FileOutputStream("Reporte_por_edad.xls");
                    book.write(file);
                    file.close();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
                break;
                
            case 1:
                LinkedList<RptCasosPorMunicipio> reporte2= generalCtrl.listCasosPorMunicipio();
                HSSFWorkbook book2 = new HSSFWorkbook();
                HSSFSheet sheet2 = book2.createSheet();
                book2.setSheetName(0, "Reporte Por Municipio");
        
                String[] encabezados2 = new String[]{
                    "Municipio",
                    "Total De Casos"
                };
                CellStyle celdaEncabezado2 =book2.createCellStyle();
                HSSFFont font2 = book2.createFont();
                font2.setBold(true);
                celdaEncabezado2.setFont(font2);
                
                HSSFRow filaEncabezado2 = sheet2.createRow(0);
                for (int i = 0; i < encabezados2.length ; i++) {
                    String encabezado = encabezados2[i];
                    HSSFCell celda = filaEncabezado2.createCell(i);
                    celda.setCellStyle(celdaEncabezado2);
                    celda.setCellValue(encabezado);
                }
                
                for (int i = 0; i < reporte2.size(); i++) {
                    HSSFRow fila = sheet2.createRow(i+1);
                    String mun = reporte2.get(i).getNombreMun();
                    int total = reporte2.get(i).getNumCasosPorMunicipio();
                    fila.createCell(0).setCellValue(mun);
                    fila.createCell(1).setCellValue(total);
                    
                }
                
            {
                try {
                    FileOutputStream file = new FileOutputStream("Reporte_por_municipio.xls");
                    book2.write(file);
                    file.close();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
                break;
                
            case 2:
                LinkedList<RptCasosPorDepartamento> reporte3= generalCtrl.listCasosPorDepartamento();
                HSSFWorkbook book3 = new HSSFWorkbook();
                HSSFSheet sheet3 = book3.createSheet();
                book3.setSheetName(0, "Reporte Por Departamento");
        
                String[] encabezados3 = new String[]{
                    "Departamento",
                    "Total De Casos"
                };
                CellStyle celdaEncabezado3 =book3.createCellStyle();
                HSSFFont font3 = book3.createFont();
                font3.setBold(true);
                celdaEncabezado3.setFont(font3);
                
                HSSFRow filaEncabezado3 = sheet3.createRow(0);
                for (int i = 0; i < encabezados3.length ; i++) {
                    String encabezado = encabezados3[i];
                    HSSFCell celda = filaEncabezado3.createCell(i);
                    celda.setCellStyle(celdaEncabezado3);
                    celda.setCellValue(encabezado);
                }
                
                for (int i = 0; i < reporte3.size(); i++) {
                    HSSFRow fila = sheet3.createRow(i+1);
                    String dep = reporte3.get(i).getNombreDep();
                    int total = reporte3.get(i).getNumCasosPorDepartamento();
                    fila.createCell(0).setCellValue(dep);
                    fila.createCell(1).setCellValue(total);
                    
                }
                
            {
                try {
                    FileOutputStream file = new FileOutputStream("Reporte_por_departamento.xls");
                    book3.write(file);
                    file.close();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
                break;
                
            case 3:
                LinkedList<RptCasosPorGenero> reporte4= generalCtrl.listCasosPorGenero();
                HSSFWorkbook book4 = new HSSFWorkbook();
                HSSFSheet sheet4 = book4.createSheet();
                book4.setSheetName(0, "Reporte Por Genero");
        
                String[] encabezados4 = new String[]{
                    "Genero",
                    "Total De Casos"
                };
                CellStyle celdaEncabezado4 =book4.createCellStyle();
                HSSFFont font4 = book4.createFont();
                font4.setBold(true);
                celdaEncabezado4.setFont(font4);
                
                HSSFRow filaEncabezado4 = sheet4.createRow(0);
                for (int i = 0; i < encabezados4.length ; i++) {
                    String encabezado = encabezados4[i];
                    HSSFCell celda = filaEncabezado4.createCell(i);
                    celda.setCellStyle(celdaEncabezado4);
                    celda.setCellValue(encabezado);
                }
                
                for (int i = 0; i < reporte4.size(); i++) {
                    HSSFRow fila = sheet4.createRow(i+1);
                    String gen = reporte4.get(i).getGenero();
                    int total = reporte4.get(i).getNumCasosPorGenero();
                    fila.createCell(0).setCellValue(gen);
                    fila.createCell(1).setCellValue(total);
                    
                }
                
            {
                try {
                    FileOutputStream file = new FileOutputStream("Reporte_por_genero.xls");
                    book4.write(file);
                    file.close();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
                break;
                }
            
                
                
        
    }//GEN-LAST:event_exportarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new View().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Tabs;
    private javax.swing.JButton exportar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTabbedPane panePorDepartamento;
    private javax.swing.JTabbedPane panePorEdad;
    private javax.swing.JTabbedPane panePorGenero;
    private javax.swing.JTabbedPane panePorMunicipio;
    // End of variables declaration//GEN-END:variables
}
